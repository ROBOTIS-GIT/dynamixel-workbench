<launch>

  <arg name="port_name"
       doc="Port connecting with target Dynamixel actuators (e.g., '/dev/ttyUSB0')" />
  <arg name="baud_rate"
       doc="Baud rate of target Dynamixel actuators (e.g., '57600')" />
  <arg name="namespace"
       doc="Namespace of the nodes started by this launch file. Specifying your robot's name or the name of the part using target actuators is recommended (e.g., 'sample_robot')" />
  <arg name="robot_description_file"
       doc="URDF/Xacro of your robot (e.g., '$(find dynamixel_general_hw)/urdf/sample1.urdf'). If 'set_robot_description' is false, you can set a dummy string to this argument because this argument is not used" />
  <arg name="dynamixel_info_file"
       doc="Configuration file for target Dynamixel actuators (e.g., '$(find dynamixel_general_hw)/config/sample1_2/dynamixel_info.yaml')" />
  <arg name="controllers_file"
       doc="Configuration file for ros_control controllers (e.g., '$(find dynamixel_general_hw)/config/sample1_2/default_controllers.yaml')" />
  <arg name="controllers_to_start"
       doc="Controllers started at launching (e.g., 'joint_state_controller position_joint_trajectory_controller')" />

  <arg name="set_robot_description" default="true"
       doc="Whether to set robot_description parameter at launching" />
  <arg name="robot_description_param" default="robot_description"
       doc="Name of robot_description parameter read by the nodes started by this launch file. If this is a relative name, its global name becomes (namespace)/(robot_description_param)" />
  <arg name="robot_description_args" default=""
       doc="Xacro args to parse robot_description_file" />
  <arg name="launch_robot_state_publisher" default="true"
       doc="Whether to start robot_state_publisher at launching" />
  <arg name="required" default="true"
       doc="Whether to kill entire roslaunch if control node dies" />
  <arg name="respawn" default="false"
       doc="Whether to restart control node automatically if it quits" />
  <arg name="joint_states_topic" default="joint_states"
       doc="Name of joint_states topic published and subscribed by the nodes started by this launch file. If this is a relative name, its global name becomes (namespace)/(joint_states_topic)" />
  <arg name="control_rate" default="20"
       doc="Hz of the control loop" />
  <arg name="calculate_effort" default="true"
       doc="Whether to calculate joint effort from Dynamixel actuator current/load" />
  <arg name="publish_temperature" default="true"
       doc="Whether to publish Dynamixel actuator temperature" />
  <arg name="publish_input_voltage" default="true"
       doc="Whether to publish Dynamixel actuator input voltage" />
  <arg name="write_read_interval" default="-1"
       doc="Minimal interval [sec] from writing Dynamixel to reading Dynamixel. Non-positive value means that interval will be entirely determined by control_rate and how long reading and writing take. You can increase this if you face reading error even when you decrease latency_timer as much as you can. Cf. https://forum.robotis.com/t/error-reading-position-value-after-write-position/6207" />
  <arg name="launch_rviz" default="false"
       doc="Whether to start RViz" />
  <arg name="rvizconfig" default="$(find dynamixel_general_hw)/config/sample_robot.rviz"
       doc="Configuration file for RViz" />

  <group ns="$(arg namespace)">

    <param if="$(arg set_robot_description)"
           name="$(arg robot_description_param)"
           command="$(find xacro)/xacro $(arg robot_description_file) $(arg robot_description_args)" />

    <node if="$(arg launch_robot_state_publisher)"
          name="robot_state_publisher"
          pkg="robot_state_publisher" type="robot_state_publisher">
      <remap from="robot_description" to="$(arg robot_description_param)" />
      <remap from="joint_states" to="$(arg joint_states_topic)"/>
    </node>

    <node name="dynamixel_general_control" pkg="dynamixel_general_hw" type="dynamixel_general_control_node"
          required="$(arg required)" respawn="$(arg respawn)" output="screen">
      <remap from="robot_description" to="$(arg robot_description_param)" />
      <remap from="joint_states" to="$(arg joint_states_topic)" />
      <rosparam subst_value="true">
        port_name: $(arg port_name)
        baud_rate: $(arg baud_rate)
        control_rate: $(arg control_rate)
        calculate_effort: $(arg calculate_effort)
        publish_temperature: $(arg publish_temperature)
        publish_input_voltage: $(arg publish_input_voltage)
        write_read_interval: $(arg write_read_interval)
      </rosparam>
      <rosparam param="dynamixel_info" file="$(arg dynamixel_info_file)" command="load" subst_value="true" />
    </node>

    <rosparam file="$(arg controllers_file)" command="load" subst_value="true" />
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
          args="$(arg controllers_to_start)" />

    <node if="$(arg launch_rviz)"
          name="rviz" pkg="rviz" type="rviz"
          args="-d $(arg rvizconfig)" />

  </group>

</launch>
